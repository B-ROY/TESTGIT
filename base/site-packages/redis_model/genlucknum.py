
#encoding=utf-8

import sys, os
import time
#from redis_model.redis_client import RQueueClient
import json
import sys, traceback
from queue import RedisQueue
import re

"""
这个工具主要是生成靓号表、机器人表、普通号表

MySQL中设计一个表为`SpeNumInfo`，字段为id、begin、end、status，后台人员可以通过CMS系统进行添加号码段，status标记为1、系统预留 2、机器人号段
MySQL中加入另外一个表为`LuckNumInfo`,字段为id、type、level、status,type为1、靓号 2、预留号 level为靓号等级，status为是否分配
定义Redis中的Key名字`HeyDo_LuckNum`作为存储靓号的Key，定义一个Key为`HeyDo_SpeBlock`为特殊号段,定义一个Key为`HeyDo_UserID`记录最后一个ID值，也就是说，当A用户获取到最后一个ID值
后，进行加1，并重新设置Key值，然后与`HeyDo_SpeBlock`区间号段进行判断，如果在区间，设置`HeyDo_UserID`为号段末尾数加1，`HeyDo_LuckNum` 中的靓号进行交集，如果不存在，正常分配，如果存在继续走上一流程，**这样的目的是保证用户ID唯一**

SpeNumInfo {'id':'1','begen':'1000000','end':'2000000','status':'1'}
           {'id':'2','begen':'2000322','end':'2000400','status':'2'}
           {'id':'3','begen':'2001400','end':'2001490','status':'2'}
           {'id':'4','begen':'2001700','end':'2001770','status':'2'}

LuckNumInfo {'num':'2000000','level':'0','status':'0'}
HeyDo_LuckNum {''}
"""


def     checkLuckNumber(number):
    #任意位置为ABCABC
    p = re.compile(r'^(?=\d*(\d)(\d)(\d)\1\2\3)\d{7}$')
    result = p.search(number)
    #任意位置为AABBCC
    p = re.compile(r'^(?=\d*(\d)\1(\d)\2(\d)\3)\d{7}$')
    result = result or p.search(number)
    #任意位置为AABB
    p = re.compile(r'^(?=\d*(\d)\1(\d)\2)\d{7}$')
    result = result or p.search(number)
    #末尾6位为AABBCC
    p = re.compile(r'^(?=\d*(\d)\1(\d)\2(\d)\3$)\d{7}$')
    result = result or p.search(number)
    #末尾4位为AABB
    p = re.compile(r'^(?=\d*(\d)\1(\d)\2$)\d{7}$')
    result = result or p.search(number)
    #末尾6位为ABCABC
    p = re.compile(r'^(?=\d*(\d)(\d)(\d)\1\2\3$)\d{7}$')
    result = result or p.search(number)
    #末尾4位为ABCD
    p = re.compile(r'^(?=\d*(0(?=1|$)|1(?=2)|2(?=3)|3(?=4|$)|4(?=5|$)|5(?=6|$)|6(?=7|$)|7(?=8|$)|8(?=9|$)|9(?=0|$)){4}$)\d{7}$')
    result = result or p.search(number)
    #末尾5位为ABCDE
    p = re.compile(r'^(?=\d*(0(?=1|$)|1(?=2)|2(?=3)|3(?=4|$)|4(?=5|$)|5(?=6|$)|6(?=7|$)|7(?=8|$)|8(?=9|$)|9(?=0|$)){5}$)\d{7}$')
    result = result or p.search(number)
    #末尾6位为ABCDE
    p = re.compile(r'^(?=\d*(0(?=1|$)|1(?=2)|2(?=3)|3(?=4|$)|4(?=5|$)|5(?=6|$)|6(?=7|$)|7(?=8|$)|8(?=9|$)|9(?=0|$)){6}$)\d{7}$')
    result = result or p.search(number)
    #末尾7位为ABCDE
    p = re.compile(r'^(?=\d*(0(?=1|$)|1(?=2)|2(?=3)|3(?=4|$)|4(?=5|$)|5(?=6|$)|6(?=7|$)|7(?=8|$)|8(?=9|$)|9(?=0|$)){7}$)\d{7}$')
    result = result or p.search(number)
    
    if not result:
        return False
    return True 
    
#TODO: 这里要进行优化
"""
这些号码已经生成了数据库表，所以下次再生成的时候需要在这个基础上进行累计，后续再修改成智能的脚步来进行执行
"""
speNumBlock = [
    {'id':'1','begin':'1000000','end':'2000400','status':'1'},
    {'id':'2','begin':'2000422','end':'2000500','status':'2'},
    {'id':'3','begin':'2001400','end':'2001490','status':'2'},
    {'id':'4','begin':'2002700','end':'2003170','status':'2'},
]
"""
speNumBlock = [
    {'id':'1','begin':'1000000','end':'2000400','status':'1'},
    {'id':'2','begin':'2000422','end':'2000500','status':'2'},
    {'id':'3','begin':'2001400','end':'2001490','status':'2'},
    {'id':'4','begin':'2002700','end':'2003770','status':'2'},
    {'id':'4','begin':'2004800','end':'2005870','status':'2'},
    {'id':'4','begin':'2006900','end':'2007970','status':'2'},
    {'id':'4','begin':'2008900','end':'2009970','status':'2'},
]
"""
def checkNorNum(strnum):
    
    slen = len(speNumBlock)
    line = {}
    result = False
    norblock = []
    
    for i in range(slen):
        line = speNumBlock[i]
        if not (i%2) and not i:
            norblock.append(line['end'])
        else:
            norblock.append(line['begin'])
            norblock.append(line['end'])  
            if i == (slen-1):
                norblock.append('2030000') 

    print norblock 
    
    for i in range(len(norblock)):
        if not (i%2): 
            if (int(strnum) > int(norblock[i])):
                result = True
            else:
                result = False
        else:
            if (int(strnum) < int(norblock[i])):
                result = result and True
            else:
                result = result and False
            
            if result:
                break
            else:
                continue    
    return result
            
            
    
if (__name__ == '__main__'):
    strNum = ''
    RESERVER_NUM = 1
    ROBOT_NUM = 2

    robotNumber = []
    luckNumber = []
    norNumber = []
    
    result = False 

    lucknum = RedisQueue("HeyDo_LuckNum")
    robotnum = RedisQueue("HeyDo_RobotNumBlock")
    nornum = RedisQueue("HeyDo_NorNumBlock")

    if not result:
        lucknum.del_key()
        robotnum.del_key()
        nornum.del_key()

    f = open("./userid.txt", "w+")
    for n in range(2000404,2030000):
        strNum = str(n)
        result = checkLuckNumber(strNum)
        if result:
            luckNumber.append(strNum)
            lucknum.push(strNum)
        else: 
            result = checkNorNum(strNum)
            if  result:
                norNumber.append(strNum)
                
                nornum.push(strNum)
            else:
                robotNumber.append(strNum+'\n')
                robotnum.push(strNum)
    f.writelines(robotNumber)
    f.close()
    print "robot num:",len(robotNumber)
    print "nor num:",len(norNumber)
    print "luck num:",len(luckNumber)

    
            
    
